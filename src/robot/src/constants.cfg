name = "Runtime constants";

motion = 
{
  limit_max_fraction  = 0.8;      // Only generate a trajectory to this fraction of max speed to give motors headroom to compensate
  controller_frequency  = 40 ;    // Hz for RobotController
  log_frequency         = 20 ;    // HZ for logging to motion log
  fake_perfect_motion   = false;   // Enable or disable bypassing clearcore to fake perfect motion for testing
  rate_always_ready     = false;   // Bypasses rate limiter if set to true
  translation = 
  {
    max_vel = 
    {
      fine   = 0.08; // m/s
      coarse = 0.5;  // m/s
    };
    max_acc = 
    {
      fine   = 0.1;  // m/s^2
      coarse = 0.2;  // m/s^2
    };
    max_jerk = 
    {
      fine   = 0.1;  // m/s^3
      coarse = 0.5;  // m/s^3
    };
    gains =
    {
      kp = 2.0;
      ki = 0.1;
      kd = 0.0;
    };
    gains_distance =
    {
      kp = 0.2;
      ki = 0.0;
      kd = 0.0;
    };
    position_threshold = 
    {
      fine = 0.01;   // m
      coarse = 0.10; // m
    };
    velocity_threshold = 
    {
      fine = 0.01;   // m/s
      coarse = 0.05; // m/s
    };
  };

  rotation = 
  {
    max_vel = 
    {
      fine   = 0.1;  // rad/s
      coarse = 0.2;  // rad/s
    };
    max_acc = 
    {
      fine   = 0.2;  // rad/s^2
      coarse = 0.5;  // rad/s^2
    };
    max_jerk = 
    {
      fine   = 0.5;  // rad/s^3
      coarse = 1.0;  // rad/s^3
    };
    gains =
    {
      kp = 3.0;
      ki = 0.1;
      kd = 0.0;
    };
    gains_distance =
    {
      kp = 0.2;
      ki = 0.0;
      kd = 0.0;
    };
    position_threshold = 
    {
      fine = 0.08;   // rad
      coarse = 0.08; // rad
    };
    velocity_threshold = 
    {
      fine = 0.02;   // rad/s
      coarse = 0.05; //rad/s
    };
  };
};

physical = 
{
  wheel_diameter = 0.152;  // m
  wheel_dist_from_center = 0.4794; // m
};

trajectory_generation = 
{
  solver_max_loops   = 30;     // Only let the solver loop this many times before giving up
  solver_alpha_decay = 0.8;    // Decay for velocity limit
  solver_beta_decay  = 0.8;    // Decay for acceleration limit
  solver_exponent_decay = 0.1; // Decay expoenent to apply each loop
  min_dist_limit    = 0.0001;  // Smallest value solver will attempt to solve for
};

tray = 
{
  default_pos_revs = 1.2;     // Default position for driving in revs from home
  load_pos_revs    = 5.0;     // Loading position in revs from home
  place_pos_revs   = 67.0;    // Placing position in revs from home
  steps_per_rev    = 800;     // Number of steps per motor rev
  controller_frequency  = 20 ;    // Hz for controller rate
  fake_tray_motions = false;   // Flag to fake tray motions for testing
};

localization = 
{
  mm_x_offset = -55.0;                      // X offset of mm pair center from center of rotation (in millimeters, + is in front, - is behind)
  mm_y_offset = 0.0;                        // Y offset of mm pair center from center of rotation (in millimeters, + is to left, - is to right)
  max_wait_time = 10.0;                     // Max time to wait (s) when waiting for good localization
  confidence_for_wait = 0.95;               // Confidence level required for waiting for localization 
  kf_predict_trans_cov = 0.0001;            // How much noise is expected in the prediciton step (each timestep) for position, lower is less noise
  kf_predict_angle_cov = 0.004;            // How much noise is expected in the prediction step for angle, lower is less noise
  kf_meas_trans_cov = 0.04;                 // How much noise is expected in the marvelmind measurements of position, lower is less noise
  kf_meas_angle_cov = 0.2;                  // How much noise is expected in the marvelmind measurements of angle, lower is less noise
  kf_uncertainty_scale = 1.0;               // Scale factor for how much extra noise to add based on position confidence
  variance_ref_trans = 1.0;                 // Max position varaince for 0 confidence
  variance_ref_angle = 1.57;                // Max angle variance for 0 confidence
  min_vel_uncertainty = 0.5;                // Minimum uncertianty for any nonzero velocity
  vel_uncertainty_slope = 0.5;              // Uncertianty/velocity scale
  max_vel_uncetainty = 1.0;                 // Uncertainty cap
  vel_uncertainty_decay_time = 4.0;         // Number of seconds after completeing motion until uncertainty goes to 0
};

distance_tracker =
{
  mapping =                                   
  {
    fwd_left = 1;                              // Which indices of the values recieved correspond to which sensor 
    fwd_right = 2;
    side_front = 0;
    side_back = 3;
  }
  dimensions = 
  {
    fwd_left_offset = 0.215;                     // How many meters (signed) from the center of the robot the sensor is placed
    fwd_right_offset = -0.16;
    side_front_offset = 0.25;                 // How many meters (signed) from the front of the robot is the sensor placed
    side_back_offset = 0.455;
  }
  limits = 
  {
    min_fwd_dist = 0.7;
    max_fwd_dist = 1.0;
    min_side_dist = 0.01;
    max_side_dist = 0.3;
  }
  kf = 
  {
    predict_trans_cov = 0.0001;               // How much noise is expected in the prediciton step (each timestep) for position, lower is less noise
    predict_angle_cov = 0.001;                // How much noise is expected in the prediciton step (each timestep) for angle, lower is less noise
    meas_trans_cov = 0.01;                   // How much noise is expected in the update step for position, lower is less noise
    meas_angle_cov = 1.0;                     // How much noise is expected in the update step for angle, lower is less noise
  }
 num_sensors = 4;                              // Number of sensors total
 samples_to_average = 10;                      // How many readings to keep in the circular buffer for each sensor
};

// USB ports on pi mapping to v4l path num
//  USB2 - 3  |   USB3 - 1   |   Eth
//  USB2 - 4  |   USB3 - 2   |
vision_tracker = {
  side = {
    camera_path = "/dev/v4l/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.1:1.0-video-index0"
    calibration_file = "/home/pi/IR_calibration_2.yml"; // Calibration data
    debug_output_path = "/home/pi/images/debug/side/"; // Path to output debug images
    debug_image = "/home/pi/images/dev/side_raw_1.jpg"; // Debug image path
    resolution_scale_x = 0.5;                             // Scale factor from calibration resolution to onboard resolution
    resolution_scale_y = 0.66666;                         // Scale factor from calibration resolution to onboard resolution
  }
  rear = {
    camera_path = "/dev/v4l/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.2:1.0-video-index0"
    calibration_file = "/home/pi/IR_calibration_1.yml"; // Calibration data
    debug_output_path = "/home/pi/images/debug/rear/"; // Path to output debug images
    debug_image = "/home/pi/images/dev/rear_raw_1.jpg"; // Debug image path
    resolution_scale_x = 0.5;                             // Scale factor from calibration resolution to onboard resolution
    resolution_scale_y = 0.66666;                         // Scale factor from calibration resolution to onboard resolution
  }
  debug = {
    use_debug_image = true;                   // Use debug image instead of loading camera
    save_camera_debug = false;
  }
  detection = {
    threshold = 220;                         // Threshold value for image processing
    blob = {
      use_area = true;                      // Use area for blob detection
      min_area = 50.0;                      // Min area for blob detection
      max_area = 100000.0;                  // Max area for blob detection
      use_circularity = true;               // Use circularity for blob detection
      min_circularity = 0.7;                // Min circularity for blob detection
      max_circularity = 1.0;                  // Max circularity for blob detection
    }
  }
  physical = {
    pixels_per_meter_u = 1362.0;              // Hack to try and get something working
    pixels_per_meter_v = 1411.0;
    side = {
      x_offset = 0.0;                       // x offset (meters) from robot frame
      y_offset = -0.54;                      // y offset (meters) from robot frame
      z_offset = 0.56;                      // z offset (meters) from robot frame
      target_x = 0.0;                       // target x coord (meters) in robot frame           
      target_y = -0.555;                     // target y coord (meters) in robot frame
    }
    rear = {
      x_offset = -0.74;                      // x offset (meters) from robot frame
      y_offset = 0.0;                       // y offset (meters) from robot frame
      z_offset = 0.55;                      // z offset (meters) from robot frame
      target_x = -0.685;                    // target x coord (meters) in robot frame           
      target_y = 0.0;                       // target y coord (meters) in robot frame
    }
  }
  kf = 
  {
    predict_trans_cov = 0.0001;               // How much noise is expected in the prediciton step (each timestep) for position, lower is less noise
    predict_angle_cov = 0.001;                // How much noise is expected in the prediciton step (each timestep) for angle, lower is less noise
    meas_trans_cov = 0.01;                   // How much noise is expected in the update step for position, lower is less noise
    meas_angle_cov = 1.0;                     // How much noise is expected in the update step for angle, lower is less noise
  }
};

mock_socket = 
{
  enabled = false;
  // Commands must have <> symbols and a number is to pause for that many ms
  data = ["<{'type':'init'}>", "20000","<{'type':'move_rel','data':{'x':1,'y':0,'a':0}}>","10000","<{'type':'place'}>","15000","<{'type':'move_rel','data':{'x':-1,'y':0,'a':0}}>"];
};
